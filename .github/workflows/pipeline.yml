name: pipeline

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET: ${{ secrets.AWS_S3_BUCKET }}

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        #https://help.github.com/en/articles/workflow-syntax-for-github-actions
        name: [
          ubuntu,
          macOS
        ]

        include:
          - name: ubuntu
            os: ubuntu-latest
            compiler: gcc
          - name: macOS
            os: macOS-latest
            compiler: clang

    steps:
      - uses: actions/checkout@v1
      - uses: chrislennon/action-aws-cli@v1.1

      - name: install dependencies (ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install ${{ matrix.compiler }} --yes
          sudo apt-get install libyaml-0-2 libyaml-dev libyaml-doc --yes
          git clone https://github.com/libcheck/check.git --branch 0.13.0
          cd check
          autoreconf --install
          ./configure
          make
          sudo make install
          sudo ldconfig
          cd ..
          rm  -rf check

      - name: install dependencies (macOS)
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew install autoconf automake libtool check pkg-config libyaml

      - name: compiler version check
        run: ${{ matrix.compiler }} --version

      - name: components
        run: make components CC=${{ matrix.compiler }}

      - name: cecs
        run: make CC=${{ matrix.compiler }}

      - name: package (ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          mkdir cecs
          cp *.so cecs
          cp *.a cecs

      - name: package (macOS)
        if: startsWith(matrix.os, 'macOS')
        run: |
          mkdir cecs
          cp *.dylib cecs
          cp *.a cecs

      - name: upload artifact (github)
        uses: actions/upload-artifact@v1
        with:
          name: cecs-${{ matrix.os }}
          path: cecs

      - name: upload artifact (s3)
        run: |
          zip -r cecs.zip cecs
          aws s3 cp cecs.zip s3://$BUCKET/${{ matrix.os }}/cecs-$GITHUB_SHA.zip

  is-release-ready:
    needs: ci
    if: github.event_name == 'pull_request' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: get version variables
        run: |
          echo "::set-env name=VMAJOR::$(cut -d . -f1 .version)"
          echo "::set-env name=VMINOR::$(cut -d . -f2 .version)"
          echo "::set-env name=VPATCH::$(cut -d . -f3 .version)"
          echo "::set-env name=VERSION::v$(cat .version)"

      - name: ensure version has been updated
        run: |
          PREVVER=$(git tag | tail -1)
          if [ $PREVVER == $VERSION ]; then
            echo "version not incremented! Aborting release"
            exit 1
          fi
        shell: bash

  release:
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: chrislennon/action-aws-cli@v1.1

      - name: get version variables
        run: |
          echo "::set-env name=VMAJOR::$(cut -d . -f1 .version)"
          echo "::set-env name=VMINOR::$(cut -d . -f2 .version)"
          echo "::set-env name=VPATCH::$(cut -d . -f3 .version)"
          echo "::set-env name=VERSION::v$(cat .version)"

      - name: set release variables
        run: |
          echo "::set-env name=DRAFT::true"

      - name: create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}${{ env.RSUFFIX }}
          draft: ${{ env.DRAFT }}
  
      - name: get artifacts
        run: |
          aws s3 cp s3://$BUCKET/ubuntu-latest/cecs-$GITHUB_SHA.zip\
           cecs-linux-$VERSION
          aws s3 cp s3://$BUCKET/macOS-latest/cecs-$GITHUB_SHA.zip\
           cecs-darwin-$VERSION

      - name: upload release artifacts (linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./cecs-linux-${{ env.VERSION }}
          asset_name: cecs-linux-latest-${{ env.VERSION }}
          asset_content_type: application/zip

      - name: upload release artifacts (macos)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./cecs-darwin-${{ env.VERSION }}
          asset_name: cecs-darwin-latest-${{ env.VERSION }}
          asset_content_type: application/zip
